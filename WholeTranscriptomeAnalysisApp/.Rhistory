return(result)
}
na_rm(test_data)
na_rm = function (data) {
result <- lapply(data, function(column) {
ifelse(is.na(column), mean(column), column)
})
return(result)
}
na_rm(test_data)
test_data
test_data <- as.data.frame(list(V1 = c(NA, NA, NA, NA, 13, 12, 9, 10, 8, 9, 11, 11, 10, 12, 9), V2 = c(NA, 12, 8, NA, 11, 11, 9, 8, 8, 10, 10, 11, 10, 10, 10), V3 = c(NA, 5, NA, 13, 12, 11, 11, 14, 8, 12, 8, 8, 10, 10, 8), V4 = c(10, 10, 10, 10, 13, 10, 11, 7, 12, 10, 7, 10, 13, 10, 9)))
test_data
na_rm = function (data) {
result <- apply(data, 1, function(column) {
ifelse(is.na(column), mean(column), column)
})
return(result)
}
na_rm(test_data)
na_rm = function (data) {
result <- apply(data, 2, function(column) {
ifelse(is.na(column), mean(column), column)
})
return(result)
}
na_rm(test_data)
na_rm = function (data) {
result <- apply(data, 2, function(x) {
x[!is.na(x) & x < 0]
#ifelse(is.na(x), mean(x), x)
})
return(result)
}
na_rm(test_data)
na_rm = function (data) {
result <- apply(data, 1, function(x) {
x[!is.na(x) & x < 0]
#ifelse(is.na(x), mean(x), x)
})
return(result)
}
na_rm(test_data)
na_rm = function (data) {
result <- lapply(data, function(column) {
column[!is.na(column) & column < 0]
})
return(result)
}
na_rm(test_data)
na_rm = function (data) {
na_rm <- function(dataframe) {
replace_na_with_mean <- function(column) {
mean_value <- mean(column, na.rm = TRUE)
column[is.na(column)] <- mean_value
return(column)
}
dataframe <- as.data.frame(lapply(dataframe, replace_na_with_mean))
return(dataframe)
}
}
na_rm(test_data)
na_rm <- function(dataframe) {
replace_na_with_mean <- function(column) {
mean_value <- mean(column, na.rm = TRUE)
column[is.na(column)] <- mean_value
return(column)
}
dataframe <- as.data.frame(lapply(dataframe, replace_na_with_mean))
return(dataframe)
}
na_rm(test_data)
my_list = list (x = c(rnorm(30), y = rnorm(10)))
my_list
str(my_list)
my_list = list (x = c(rnorm(30), y = rnorm(10)))
my_list
str(my_list)
my_list <- list(x = c(rnorm(30), NA), y = rnorm(10))
my_list = list (x = c(rnorm(30), y = rnorm(10)))
my_list <- list(x = c(rnorm(30), NA), y = rnorm(10))
str(my_list)
my_list = list (x = c(rnorm(30)), y = rnorm(10)))
my_list <- list(x = rnorm(30), y = rnorm(10))
str(my_list)
lapply(my_list, mean)
lapply(my_list, mean, na.rm = T)
lapply(my_list, function(x) x * 2)
my_list <- list(x = c(rnorm(30), NA), y = rnorm(10))
View(my_list)
View(my_list)
my_list[["x"]]
lapply(my_list, mean)
my_list <- list(x = rnorm(30), y = rnorm(10))
lapply(my_list, mean)
lapply(my_list, mean, na.rm = T)
lapply(my_list, function(x) x * 2)
lapply(my_list, mean)
sapply(my_list, mean)
typeof(sapply(my_list, mean))
typeof(lapply(my_list, mean))
cars <- c("Mazda", "Volga", "Merc")
car <- "Mazda RX4"
sapply(cars, function(x) grepl(x, car))
lapply(cars, function(x) grepl(x, car))
mtcars
head(mtcars)
str(mtcars)
levels(mtcars$am)
factor(mtcars$am)
# step 3 by tapply
tapply(mtcars$mpg, mtcars$am, function(x) mean(x))
aggregate(mpg ~ am, mtcars, function(x) mean(x))
positive_sum = function (data) {
lapply(data, sum(data[data > 0]))
}
d <- data.frame(X1 = c(-1, -2, 0), X2 = c(10, 4, NA), X3 = c(-4, NA, NA))
positive_sum(d)
positive_sum = function (data) {
lapply(data, function(x) sum(x[x > 0]))
}
positive_sum(d)
lapply(data, function(x) sum(x[x > 0], na.rm = T))
positive_sum = function (data) {
lapply(data, function(x) sum(x[x > 0], na.rm = T))
}
positive_sum(d)
get_sd <- function(x){
num_var <- sapply(x, is.numeric)
sapply(x[, num_var], sd)
}
my_df <- data.frame(x = 1:10, y = letters[1:10])
my_df
my_df[1]
my_df[1]
my_df[[1]]
my_df[1]
my_df[[1]]
my_df[, 1]
grepl('HPS1', "p1@HPS1")
my_names = function(my_data, names) {
sapply(mydata,  grepl(names, my_data ))
}
names =c('HPS1', 'GOT1')
my_names(my_data, names)
my_names = function(my_data, names) {
sapply(mydata,  function(x) grepl(x, names ))
}
my_names(my_data, names)
test_data <- as.data.frame(list(name = c("p4@HPS1", "p7@HPS2", "p4@HPS3", "p7@HPS4", "p7@HPS5", "p9@HPS6", "p11@HPS7", "p10@HPS8", "p15@HPS9"), expression = c(118.84, 90.04, 106.6, 104.99, 93.2, 66.84, 90.02, 108.03, 111.83)))
names = c("HPS5", "HPS6", "HPS9", "HPS2", "HPS3", "HPS7", "HPS4", "HPS8")
my_names(test, names)
my_names = function(my_data, names) {
sapply(my_data,  function(x) grepl(x, names ))
}
test_data <- as.data.frame(list(name = c("p4@HPS1", "p7@HPS2", "p4@HPS3", "p7@HPS4", "p7@HPS5", "p9@HPS6", "p11@HPS7", "p10@HPS8", "p15@HPS9"), expression = c(118.84, 90.04, 106.6, 104.99, 93.2, 66.84, 90.02, 108.03, 111.83)))
names = c("HPS5", "HPS6", "HPS9", "HPS2", "HPS3", "HPS7", "HPS4", "HPS8")
my_names(test, names)
my_names(test_data, names)
my_names = function(my_data, names) {
sapply(my_data,  function(x) grepl(x, names ))
}
test_data <- as.data.frame(list(name = c("p4@HPS1", "p7@HPS2", "p4@HPS3", "p7@HPS4", "p7@HPS5", "p9@HPS6", "p11@HPS7", "p10@HPS8", "p15@HPS9"), expression = c(118.84, 90.04, 106.6, 104.99, 93.2, 66.84, 90.02, 108.03, 111.83)))
names = c("HPS5", "HPS6", "HPS9", "HPS2", "HPS3", "HPS7", "HPS4", "HPS8")
my_names(test_data, names)
sapply(my_data[,1],  function(x) grepl(x, names ))
my_names = function(my_data, names) {
sapply(my_data[,1],  function(x) grepl(x, names ))
}
names = c("HPS5", "HPS6", "HPS9", "HPS2", "HPS3", "HPS7", "HPS4", "HPS8")
my_names(test_data, names)
my_names <- function(data, check, names){
result <- sapply(names, function (x) grepl(x, check))
result <- ifelse(apply(result,1, sum) == 1, T, F)
return(data[result,])
}
names = c("HPS5", "HPS6", "HPS9", "HPS2", "HPS3", "HPS7", "HPS4", "HPS8")
my_names(test_data, names)
my_names <- function(data, names){
result <- sapply(names, function (x) grepl(x))
result <- ifelse(apply(result,1, sum) == 1, T, F)
return(data[result,])
}
names = c("HPS5", "HPS6", "HPS9", "HPS2", "HPS3", "HPS7", "HPS4", "HPS8")
my_names(test_data, names)
my_names <- function(dataframe, gene_names) {
# Создаем регулярное выражение для поиска генов
gene_pattern <- paste(gene_names, collapse = "|")
# Отбираем строки, где названия генов после "@" соответствуют gene_names
result <- dataframe[grepl(paste0("@(", gene_pattern, ")$"), dataframe$name), ]
return(result)
}
test_data <- as.data.frame(list(name = c("p4@HPS1", "p7@HPS2", "p4@HPS3", "p7@HPS4", "p7@HPS5", "p9@HPS6", "p11@HPS7", "p10@HPS8", "p15@HPS9"), expression = c(118.84, 90.04, 106.6, 104.99, 93.2, 66.84, 90.02, 108.03, 111.83)))
names = c("HPS5", "HPS6", "HPS9", "HPS2", "HPS3", "HPS7", "HPS4", "HPS8")
my_names(test_data, names)
my_names <- function(dataframe, gene_names) {
# Use sapply to create a logical vector for rows matching any gene name
matches <- sapply(dataframe$name, function(x) {
any(grepl(paste0("@", gene_names, "$"), x))
})
# Filter the dataframe based on the logical vector
result <- dataframe[matches, ]
return(result)
}
my_names(test_data, names)
my_names <- function(dataframe, gene_names) {
# Use sapply to create a logical vector for rows matching any gene name
matches <- sapply(dataframe$name, function(x) {
any(grepl(paste0("@", gene_names, "$"), x))
})
# Filter the dataframe based on the logical vector
result <- dataframe[matches, ]
return(result)
}
my_names(test_data, names)
my_names <- function (dataset, names) {
dataset[sapply(names, grep, dataset$name), ]
}
my_names(test_data, names)
my_names <- function (dataset, names) {
dataset[sapply(names, grep, dataset$name), ]
}?sapply
?sapply
?which
my_names <- function (dataset, names) {
dataset[as.numeric(lapply(names, function(x) which(grepl(x, dataset$name)))), ]
}
my_names(test_data, names)
my_names(test_data, names)
debugSource("~/Library/CloudStorage/GoogleDrive-Aigul.Sharip@nu.edu.kz/My Drive/Bioinformatics/R/AdvancedDataAnalysisInR/ApplyFunctionsScripts.R")
debugSource("~/Library/CloudStorage/GoogleDrive-Aigul.Sharip@nu.edu.kz/My Drive/Bioinformatics/R/AdvancedDataAnalysisInR/ApplyFunctionsScripts.R")
my_names(test_data, names)
my_names <- function (dataset, names) {
dataset[lapply(names, function(x) which(grepl(x, dataset$name))), ]
}
my_names(test_data, names)
my_names = function(my_data, names) {
sapply(my_data,  function(x) which(grepl(x, my_data$name)))
}
my_names(test_data, names)
my_names = function(my_data, names) {
my_data[as.numeric(sapply(my_data,  function(x) which(grepl(x, my_data$name))))]
}
my_names(test_data, names)
my_data[as.numeric(lapply(my_data,  function(x) which(grepl(x, my_data$name))))]
my_names = function(my_data, names) {
my_data[as.numeric(lapply(my_data,  function(x) which(grepl(x, my_data$name))))]
}
my_names(test_data, names)
my_data[as.numeric(lapply(names,  function(x) which(grepl(x, my_data$name))))]
my_names = function(my_data, names) {
my_data[as.numeric(lapply(names,  function(x) which(grepl(x, my_data$name))))]
}
my_names(test_data, names)
my_names <- function (dataset, names) {
dataset[as.numeric(lapply(names, function(x) which(grepl(x, dataset$name)))), ]
}
my_names(test_data, names)
my_data[as.numeric(lapply(names,  function(x) which(grepl(x, my_data$name)))),]
my_names = function(my_data, names) {
my_data[as.numeric(lapply(names,  function(x) which(grepl(x, my_data$name)))),]
}
my_names(test_data, names)
lapply(names,  function(x) which(grepl(x, my_data$name))))
lapply(names,  function(x) which(grepl(x, my_data$name)))
lapply(names,  function(x) which(grepl(x, test_data$name)))
test_data
test_data
test_data
my_names(test_data, names)
my_names = function (my_data, names) {
mydata[as.numeric(lappy(names, function (x) which(grepl((x, my_data$name))))),]
mydata[as.numeric(lapply(names, function (x) which(grepl((x, my_data$name))))),]
my_names = function (my_data, names) {
mydata[as.numeric(lapply(names, function (x) which(grepl(x, my_data$name)))),]
}
my_names(test_data, names)
my_data[as.numeric(lapply(names, function (x) which(grepl(x, my_data$name)))),]
my_names = function (my_data, names) {
my_data[as.numeric(lapply(names, function (x) which(grepl(x, my_data$name)))),]
}
my_names(test_data, names)
head(swiss)
swiss[1, ]
swiss[, 1]
swiss[, 1:]
swiss[, 2:]
swiss[, 2:6]
ncol(data)
ncol(swiss)
dependent = swiss[, 2: ncol(swiss)]
head(dependent)
lapply(dependent, function(x) shapiro.test(x)$p.value)
sapply(dependent, function(x) shapiro.test(x)$p.value)
which(sapply(dependent, function(x) shapiro.test(x)$p.value))
normal = which(sapply(dependent, function(x) shapiro.test(x)$p.value) > 0.05 )
normal
swiss[1]
normal_index = which(sapply(swiss, function(x) shapiro.test(x)$p.value) > 0.05 )
normal_index
model = lm(swiss[1] ~ swiss[1], swiss)
model = lm(swiss[1] ~ swiss[2], swiss)
model = lm(swiss[1,] ~ swiss[2,], swiss)
model = lm(swiss$Fertility ~ swiss$Agriculture, swiss)
model = lm(swiss[, 1] ~ swiss[, 2], swiss)
model = lm(swiss[, 1] ~ swiss[,1] + swiss[, 2], swiss)
model = lm(swiss[, 1] ~ swiss[,1] + swiss[, 2], swiss)
normal_index = normal_index[1:]
normal_index = which(sapply(swiss, function(x) shapiro.test(x)$p.value) > 0.05 )
normal_index = normal_index[1:]
type(normal_index)
normal_index = which(sapply(swiss, function(x) shapiro.test(x)$p.value) > 0.05 )
normal_index = normal_index[1,]
normal_index = normal_index[1:]
normal_index <- normal_index[-1]  # Removes the first element
normal_index
filtered_data <- swiss[, normal_index]
# Create the regression formula dynamically
response_var <- names(swiss)[1]  # Assume the first column ('Fertility') is the response variable
response_var
predictor_vars <- paste(names(filtered_data), collapse = " + ")  # Combine predictor column names
predictor_vars
formula <- as.formula(paste(response_var, "~", predictor_vars))  # Create the formula
# Fit the regression model
model <- lm(formula, data = swiss)
model
model$coefficients
smart_lm = function (data) {
normal_index = which(sapply(data, function(x) shapiro.test(x)$p.value) > 0.05 )
normal_index <- normal_index[-1]
if (length(normal_index) == 0) {
return("There are no normal variables in the data.")
} else {
filtered_data <- swiss[, normal_index]
response_var <- names(swiss)[1]
response_var
predictor_vars <- paste(names(filtered_data), collapse = " + ")
predictor_vars
formula <- as.formula(paste(response_var, "~", predictor_vars))
model <- lm(formula, data = swiss)
return(model$coefficients)
}
}
smart_lm(swiss)
filtered_data = swiss[, normal_index]
response = names(swiss[1])
predictors = paste(names(filtered_data), collapse = " + ")
formula = as.formula(paste (response, "~ ", predictors))
test_data <- as.data.frame(list(V1 = c(20.3, 20.1, 24.4, 18.6, 20.1, 15.8, 18.6, 19.3, 19.3, 21.2, 19.7, 22.1, 23, 21.1, 20.6, 21.2, 19.7, 19.6, 20.6, 19.1, 23.2, 21.3, 16.7, 20.3, 17.8, 17.6, 18.7, 20.8, 23.2, 15.2), V2 = c(19.3, 20.8, 22.5, 22.1, 23.2, 19.4, 14.5, 21.5, 15.9, 20.4, 22.9, 19.6, 18.1, 20.1, 17.1, 20.7, 19.3, 19.9, 18.9, 19.9, 20.7, 20.9, 21, 21.1, 21.6, 18.3, 19.7, 18.5, 20.2, 22.6)))
head(test_data)
smart_lm(swiss)
smart_lm(test_data)
smart_lm(test_data)
smart_lm = function (data) {
normal_index = which(sapply(data, function(x) shapiro.test(x)$p.value) > 0.05 )
normal_index <- normal_index[-1]
if (length(normal_index) == 0) {
return("There are no normal variables in the data")
} else {
filtered_data <- data[, normal_index]
response_var <- names(data)[1]
predictor_vars <- paste(names(filtered_data), collapse = " + ")
formula <- as.formula(paste(response_var, "~", predictor_vars))
model <- lm(formula, data = data)
return(model$coefficients)
}
}
smart_lm(test_data)
shapiro.test(test_data$V1)
shapiro.test(test_data$V2)
smart_lm = function (data) {
normal_index = which(sapply(data, function(x) shapiro.test(x)$p.value) > 0.05 )
normal_index <- normal_index[-1]
if (length(normal_index) == 0) {
return("There are no normal variables in the data")
} else {
filtered_data <- data[, normal_index]
response_var <- names(data)[1]
predictor_vars <- paste(names(filtered_data), collapse = " + ")
formula <- as.formula(paste(response_var, "~", predictor_vars))
model <- lm(formula, data = data)
return(model$coefficients)
}
}
test_data <- as.data.frame(list(V1 = c(20.3, 20.1, 24.4, 18.6, 20.1, 15.8, 18.6, 19.3, 19.3, 21.2, 19.7, 22.1, 23, 21.1, 20.6, 21.2, 19.7, 19.6, 20.6, 19.1, 23.2, 21.3, 16.7, 20.3, 17.8, 17.6, 18.7, 20.8, 23.2, 15.2), V2 = c(19.3, 20.8, 22.5, 22.1, 23.2, 19.4, 14.5, 21.5, 15.9, 20.4, 22.9, 19.6, 18.1, 20.1, 17.1, 20.7, 19.3, 19.9, 18.9, 19.9, 20.7, 20.9, 21, 21.1, 21.6, 18.3, 19.7, 18.5, 20.2, 22.6)))
smart_lm(test_data)
normal_index = which(sapply(test_data, function(x) shapiro.test(x)$p.value) > 0.05 )
normal_index
normal_index
normal_index <- normal_index[-1]
normal_index
smart_lm <- function(data) {
normal_index <- which(sapply(data, function(x) shapiro.test(x)$p.value) > 0.05)
normal_index <- normal_index[-1]
# Check if there are any normal predictor variables
if (length(normal_index) == 0) {
return("There are no normal variables in the data")
} else {
filtered_data <- data[, normal_index, drop = FALSE]  # Ensure it's still a dataframe
# If no predictors remain after subsetting
if (ncol(filtered_data) == 0) {
return("No predictors available after filtering normal variables")
}
response_var <- names(data)[1]  # Assume the first column is the response variable
predictor_vars <- paste(names(filtered_data), collapse = " + ")  # Combine predictor column names
formula <- as.formula(paste(response_var, "~", predictor_vars))  # Create the formula
model <- lm(formula, data = data)
return(model$coefficients)
}
}
smart_lm(test_data)
smart_lm <- function(data) {
normal_index <- which(sapply(data, function(x) shapiro.test(x)$p.value) > 0.05)
normal_index <- normal_index[-1]
# Check if there are any normal predictor variables
if (length(normal_index) == 0) {
return("There are no normal variables in the data")
} else {
filtered_data <- data[, normal_index, drop = FALSE]  # Ensure it's still a dataframe
#if (ncol(filtered_data) == 0) {
#  return("No predictors available after filtering normal variables")
#}
response_var <- names(data)[1]  # Assume the first column is the response variable
predictor_vars <- paste(names(filtered_data), collapse = " + ")  # Combine predictor column names
formula <- as.formula(paste(response_var, "~", predictor_vars))  # Create the formula
model <- lm(formula, data = data)
return(model$coefficients)
}
}
smart_lm(test_data)
sapply(iris[, 1: 4], function(x) t.test(x, mean_value))
sapply(iris[, 1: 4], function(x) t.test(iris[x], mean_value))
sapply(iris[, 1: 4], function(x) t.test(iris[x,], mean_value))
apply(iris[, 1: 4], 1, function(row) t.test(row, mean_value))
mean_value = 4
apply(iris[, 1: 4], 1, function(row) t.test(row, mean_value))
apply(iris[, 1: 4], 1, function(row) t.test(row, mu= mean_value))
one_sample_t = function (data, mean_value ) {
results <- lapply(data, function(column) {
test <- t.test(column, mu = mean_value)  # Perform t-test
c(t = test$statistic, df = test$parameter, p_value = test$p.value)  # Extract desired values
})
}
one_sample_t(iris[, 1:4], 4)
one_sample_t = function (data, mean_value ) {
results <- lapply(data, function(column) {
test <- t.test(column, mu = mean_value)  # Perform t-test
c(t = test$statistic, df = test$parameter, p_value = test$p.value)  # Extract desired values
})
return(results)
}
one_sample_t(iris[, 1:4], 4)
c(test$statistic, df = test$parameter, p_value = test$p.value)  # Extract desired values
one_sample_t = function (data, mean_value ) {
results <- lapply(data, function(column) {
test <- t.test(column, mu = mean_value)  # Perform t-test
c(t = test$statistic, df = test$parameter, p_value = test$p.value)  # Extract desired values
})
return(results)
}
one_sample_t(iris[, 1:4], 4)
one_sample_t = function (data, mean_value ) {
results <- lapply(data, function(column) {
test <- t.test(column, mu = mean_value)  # Perform t-test
c(test$statistic, test$parameter, test$p.value)  # Extract desired values
})
return(results)
}
one_sample_t(iris[, 1:4], 4)
test_data <- as.data.frame(list(V1 = c(53, 43, 37, 48, 43, 47, 46, 33, 40, 48), V2 = c(30, 34, 56, 51, 40, 53, 29, 42, 30, 41), V3 = c(43, 42, 59, 60, 38, 27, 24, 42, 45, 42), V4 = c(24, 51, 30, 49, 43, 39, 29, 37, 34, 41), V5 = c("A", "B", "A", "A", "B", "B", "B", "B", "B", "A"), V6 = c(34, 46, 36, 41, 35, 29, 9, 38, 39, 34), V7 = c(29, 36, 40, 49, 31, 44, 45, 40, 54, 35), V8 = c(48, 39, 32, 31, 36, 46, 53, 32, 36, 44), V9 = c("A", "B", "B", "B", "B", "A", "B", "A", "A", "A")))
general_mean = 7
one_sample_t(test_data, general_mean)
one_sample_t = function (data, mean_value ) {
numeric_data = data[sapply, is.numeric()]
results <- lapply(numeric_data, function(column) {
test <- t.test(column, mu = mean_value)
c(test$statistic, test$parameter, test$p.value)
})
return(results)
}
one_sample_t(iris[, 1:4], 4)
one_sample_t = function (data, mean_value ) {
numeric_data = data[sapply, is.numeric]
results <- lapply(numeric_data, function(column) {
test <- t.test(column, mu = mean_value)
c(test$statistic, test$parameter, test$p.value)
})
return(results)
}
one_sample_t(iris[, 1:4], 4)
one_sample_t = function (data, mean_value ) {
numeric_data = data[sapply(data, is.numeric)]
results <- lapply(numeric_data, function(column) {
test <- t.test(column, mu = mean_value)
c(test$statistic, test$parameter, test$p.value)
})
return(results)
}
one_sample_t(iris[, 1:4], 4)
one_sample_t(test_data, general_mean)
normality_tests <- lapply(iris[, 1:4], shapiro.test)
normality_tests
get_p_value <- function(test_list){
p_values = lapply(test_list, function(x) x$p.value)
return(unlist(p_values))
}
get_p_value(normality_tests)
get_p_value <- function(test_list){
p_values = lapply(test_list, function(x) x$p.value)
return(p_values)
}
get_p_value(normality_tests)
